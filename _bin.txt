"builder": "@angular-builders/custom-webpack:browser",

"builder": "@angular-builders/custom-webpack:dev-server",

"builder": "@angular-builders/custom-webpack:karma",



ng generate application common --prefix=common --routing=true --skip-install=true --skip-package-json=true --style=scss
ng generate application carmaster --prefix=carmaster --routing=true --skip-install=true --skip-package-json=true --style=scss

ng generate component components/pages/user-page/user-home-page --project=travellrs

ng generate service services/client --project=modern-common


<!-- Phone -->
  <div class="card-box-1">
    <div class="uk-card-body">

      <form class="" [formGroup]="phoneForm" (ngSubmit)="send_sms_verification()">
        <fieldset class="uk-fieldset">
          <legend class="uk-legend">Phone</legend>
          <br/>
          
          <div class="uk-margin">
            <span class="label-info">
              Verify your new phone number ({{ phoneForm.value.phone.length }}/{{ 10 }})
            </span>
            <input type="phone" class="input-text-1"
              placeholder="Phone"
              formControlName="phone"
            />
          </div>
        </fieldset>

        <button type="submit"
          class="btn-primary-1"
          [disabled]="phone_is_verified || verification_requested_successfully || !phoneForm.valid || phoneForm.value.phone === you!.phone"
        >
          Submit
        </button>
      </form>

      <br/>

      <form class="" *ngIf="verification_requested_successfully" [formGroup]="phoneVerifyForm" (ngSubmit)="verify_sms_code()">
        <div class="form-group">
          <span class="label-info">
            Enter verification code ({{ phoneVerifyForm.value.code.length }}/{{ 6 }})
          </span>
          <input type="text" class="input-text-1"
            placeholder="Code"
            formControlName="code"
          />
        </div>
        <br/>
        <button type="submit" class="btn-primary-1"
          [disabled]="phone_is_verified || !phoneVerifyForm.valid">Submit</button>
      </form>
    </div>
  </div>
  

<!-- Wallpaper -->
  <div class="card-box-1">
    <div class="uk-card-body">
      <h3>Wallpaper</h3>
      <form
        #userWallpaperFormElm
        [formGroup]="userWallpaperForm"
        (ngSubmit)="onSubmitUserWallpaperForm(userWallpaperFormElm, wallpaperInput)"
      >
        <div class="">
          <input
            #wallpaperInput
            type="file"
            class=""
            name="wallpaper"
            formControlName="file"
          />
        </div>
        <br/>
        <div class="form-group">
          <button
            type="submit"
            class="btn-primary-1"
            [disabled]="userWallpaperForm.invalid || loading"
          >
            Submit
          </button>
        </div>
      </form>
    </div>
  </div>



| date : 'MMM d, y - h:mm a'


  <div class="uk-margin">
            <span class="label-info">
              Tags <span><small>separated by commas</small></span>
            </span>
            <textarea type="text" class="input-text-1" placeholder="Enter Delivery Tags" rows="3" formControlName="tags"></textarea>
          </div>


newDeliveryForm = new UntypedFormGroup({
    title: new UntypedFormControl('', [Validators.required, Validators.minLength(10)]),
    description: new UntypedFormControl('', [Validators.required, Validators.minLength(10)]),
    file: new UntypedFormControl(null),

    // from_location: new UntypedFormControl('', [Validators.required]),
    // from_address: new UntypedFormControl('', [Validators.required]),
    // from_street: new UntypedFormControl('', [Validators.required]),
    // from_city: new UntypedFormControl('', [Validators.required]),
    // from_state: new UntypedFormControl('', [Validators.required]),
    // from_zipcode: new UntypedFormControl('', [Validators.required]),
    from_person: new UntypedFormControl('', [Validators.required]),
    from_person_id_required: new UntypedFormControl(false, []),
    from_person_sig_required: new UntypedFormControl(false, []),

    // to_location: new UntypedFormControl('', [Validators.required]),
    // to_address: new UntypedFormControl('', [Validators.required]),
    // to_street: new UntypedFormControl('', [Validators.required]),
    // to_city: new UntypedFormControl('', [Validators.required]),
    // to_state: new UntypedFormControl('', [Validators.required]),
    // to_zipcode: new UntypedFormControl('', [Validators.required]),
    to_person: new UntypedFormControl('', [Validators.required]),
    to_person_id_required: new UntypedFormControl(false, []),
    to_person_sig_required: new UntypedFormControl(false, []),

    // category: new UntypedFormControl('', []),
    // tags: new UntypedFormControl('', []),
    size: new UntypedFormControl(this.sizes[1], [Validators.required]),
    weight: new UntypedFormControl(0, [Validators.min(0)]),
    payout: new UntypedFormControl(0, [Validators.min(10)]),
    penalty: new UntypedFormControl(0, [Validators.min(0)]),
    auto_accept_anyone: new UntypedFormControl(true),
    urgent: new UntypedFormControl(false),
  });




  export class DeliverMeWelcomeComponent implements OnInit {
  you: IUser | any;
  loading: boolean = false;

  locationInput: HTMLInputElement | any;
  subscriptionsMap = new Map<string, Subscription>();
  locationResults: any;
  autoCompleteData: any;

  constructor(
    private googleService: GoogleMapsService,
    private userStore: UserStoreService,
    private userService: UsersService,
  ) { }

  ngOnInit() {
    this.userStore.getChangesObs().subscribe((you: IUser | null) => {
      this.you = you;
    });
  }

  ngOnDestroy() {
    for (const subscription of this.subscriptionsMap.values()) {
      subscription.unsubscribe();
    }
  }

  ngAfterViewInit() {
    this.locationInput = <HTMLInputElement> window.document.getElementById('location-input');
    const googleIsReadySub = this.googleService.isReady().subscribe(
      (google) => {
        if (google) {
          this.initGoogle(google);
        }
      },
      (error) => {
        console.log(error);
      }
    );
    this.subscriptionsMap.set('googleIsReadySub', googleIsReadySub);
  }

  initGoogle(google: any) {
    if (!this.locationInput) {
      throw new ReferenceError(`location-input is not defined...`);
    }

    const place_changes_sub = this.googleService.makeTextInputIntoLocationAutoComplete(this.locationInput).subscribe({
      next: (results) => {
        this.locationResults = results;
        console.log(this);
      }
    });
    this.subscriptionsMap.set('place_changes_sub', place_changes_sub);
  }

  searchDeliveries() {
    const canSearch = this.locationResults && !!this.locationInput!.value;
    if (!canSearch) {
      console.log(`cannot search...`);
      return;
    }

    
  }
}




.subscribe({
      next: (response: any) => {
        
      },
      error: (error: any) => {
        
      },
      complete: () => {
        
      },
    });




// stripe theme colors

--backgroundColor: #fff;
--linkColor: var(--accentColor);
--linkHoverColor: #0a2540;
--buttonColor: var(--accentColor);
--buttonHoverColor: #0a2540;
--buttonDisabledColor: #cfd7df;
--buttonDisabledOpacity: 0.7;
--knockoutColor: #fff;
--knockoutDisabledColor: #8898aa;
--guideSolidColor: rgba(66,71,112,0.06);
--guideDashedColor: rgba(66,71,112,0.09);
--titleColor: #0a2540;
--textColor: #425466;
--inputBackground: #f1f4f7;
--inputPlaceholderColor: #acb9c5;
--inputTextColor: #0a2540;
--inputErrorAccentColor: #ff5191;
--annotationColor: #8c9eb1;
--maskFadeColor: rgba(0,0,0,0.4);
--navColor: #0a2540;
--navHoverColor: #0a2540;
--navHoverOpacity: 0.6;
--footerColor: #0a2540;
--cardBorderColor: #cbd6e0;
--cardBackground: #fff;
--subcardBackground: #f6f9fc;
--gridSubcardBackground: #f6f9fc;
--tableIconColor: #8c9eb1;
--stripeAccentWhite: #fff;
--stripeAccentLight: #e3e7ec;
--stripeAccentDark: #0a2540;
--bulletColor: #cfd7df;
--footnoteTextColor: #4d5b78;
--disclaimerTextColor: #707f98;
--inlineCodeTextColor: #2c3a57;
--inlineCodeBackground: #e6ecf2;
--socialLogoColor: #c4ccd8;
--socialLogoHoverColor: #0a2540;





heroku config:set -a rmw-modern-apps PROCFILE=Procfiles/modern/Procfile

NODE_BUILD_FLAGS

https://github.com/heroku/heroku-buildpack-multi-procfile.git


<div class="container mx-auto">
      <div class="section-header">
        <h2 class="text-4xl mb-10 text-center">Apps</h2>
      </div>
  
      <div class="">
        <div *ngFor="let app of apps" class="app-container">
          
          <!-- https://v1.tailwindcss.com/components/cards -->
          <div class="w-full shadow-md border-gray-1 mb-3">
            <!-- <div class="h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden" style="background-image: url('/img/card-left.jpg')" title="Woman holding a mug"></div> -->
            <div class="bg-white rounded-1 p-4 flex flex-col justify-between leading-normal">
              <div class="mb-8">
                <div class="text-gray-900 font-bold text-xl mb-2">{{ app.title }}</div>
                <p class="text-gray-700 text-base">{{ app.description }}</p>
              </div>
              <div class="flex items-center">
                <img *ngIf="!!app.img" class="w-10 h-10 rounded-full mr-4" [src]="app.img">
                <div class="text-sm">
                  <p class="text-gray-900 leading-none">
                    <a [href]="app.link" target="_blank">Page</a>
                  </p>
                </div>
              </div>
            </div>
          </div>

        </div>
      </div>
      
    </div>